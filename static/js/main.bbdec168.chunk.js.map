{"version":3,"sources":["getWeb3.js","Header.js","Footer.js","Content.js","LeftColumn.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","async","ethereum","web3","Web3","enable","error","console","log","provider","providers","HttpProvider","Header","React","Component","render","isOwner","this","props","isVoter","userStatus","className","addr","Footer","Content","workflowStatus","owner","voters","proposals","winningProposalID","runAddVoter","runNextStatus","runAddProposal","runSetVote","textChangeStatus","type","id","placeholder","onClick","map","proposal","description","index","voteCount","LeftColumn","statusList","status","App","state","accounts","contract","componentDidMount","on","location","reload","eth","getAccounts","networkId","net","getId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","options","fromBlock","toBlock","getPastEvents","returnValues","voterAddress","methods","call","includes","idProposalList","proposalId","push","getOneProposal","from","setState","alert","voterAddr","document","getElementById","value","addVoter","send","addrList","addProposal","getProposals","voteButton","voteText","setVote","parseInt","remove","innerHTML","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","newStatus","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bbdec168.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react';\n\nexport default class Header extends React.Component {\n\n    render(){\n        const isOwner = this.props.isOwner;\n        const isVoter = this.props.isVoter;\n        const userStatus = isOwner? \"ADMIN\": isVoter? \"VOTER\" : \"UNREGISTERED\";\n        return(\n            <div className=\"header\">\n                <h1>Voting DApp ðŸ—³</h1>\n                <div className=\"user-infos\">\n                    <p>Connected address:</p>\n                    <p>{this.props.addr}</p>\n                    <p>{userStatus}</p> \n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\n\nexport default class Footer extends React.Component {\n\n    render(){\n        return(\n            <div className=\"footer\">\n                <hr/>\n                <p>Alyra - Project nÂ°3 : Voting DApp - Marielle DIANDY</p> \n            </div>\n        )\n    }\n}\n","import React from 'react';\n\nexport default class Content extends React.Component {\n\n    render(){\n        const workflowStatus = this.props.workflowStatus;\n        const owner = this.props.owner;\n        const isOwner = this.props.isOwner;\n        const isVoter = this.props.isVoter;\n        const voters = this.props.voters;\n        const proposals = this.props.proposals;\n        const winningProposalID = this.props.winningProposalID;\n\n        const runAddVoter = this.props.runAddVoter;\n        const runNextStatus = this.props.runNextStatus;\n        const runAddProposal = this.props.runAddProposal;\n        const runSetVote = this.props.runSetVote;\n\n        const textChangeStatus = [\"Start proposals registering\", \"End proposals registering\", \"Start voting session\", \"End voting session\", \"Tally votes\"];\n    \n        \n        // 0 - Registerig voters\n        if (workflowStatus===\"0\"){\n            if (isOwner){\n                return (\n                    <div className=\"content\">\n                        <h1>Registering session</h1>\n                        <br />\n                        <br />\n                        <input type=\"text\" id=\"voter-addr\" placeholder=\"Voter address\"/>\n                        <button onClick={runAddVoter}>Add voter</button>\n\n                        <br />\n                        <p>Registered voters</p>\n                        <ul>\n                            {voters.map((addr) => (\n                                <li>{addr}</li>\n                            ))}\n                        </ul>\n                        <br />\n                        <button onClick={runNextStatus}>{textChangeStatus[workflowStatus]}</button>\n                    </div>\n                );\n            }\n            else if (isVoter){\n                return (   \n                    <div className=\"content\">\n                        <h1>Registering session</h1>\n\n                        <p>You are registered as a voter!</p>\n                        <p>Wait for the next session to give proposals</p>\n                        <br />\n                        <br />\n                        <p>Registered voters</p>\n                        <ul>\n                            {voters.map((addr) => (\n                                <li>{addr}</li>\n                            ))}\n                        </ul>\n                    </div>\n                );\n            }\n            else{\n                return (   \n                    <div className=\"content\">\n                        <h1>Registering session</h1>\n                        <p>You are not yet registered as a voter...</p>\n                        <br />\n                        <br />\n                        <p>Registered voters</p>\n                        <ul>\n                            {voters.map((addr) => (\n                                <li>{addr}</li>\n                            ))}\n                        </ul>\n                    </div>\n                );\n            }\n        }\n\n        // 1 - Proposals \n        else if (workflowStatus===\"1\"){\n            if(isOwner){\n                return(\n                    <div className=\"content\">\n                        <h1>Proposals session</h1>\n                        <p>The workflow status is: {workflowStatus}</p>\n                        <p>Voters are giving proposals...</p>\n                        <br />\n                        <button onClick={runNextStatus}>{textChangeStatus[workflowStatus]}</button>\n                    </div>\n                );\n            }\n            else if (isVoter){\n                return (   \n                    <div className=\"content\">\n                        <h1>Proposals session</h1>\n                        <br/>\n                        <input type=\"text\" id=\"proposal\" placeholder=\"Proposal\"/>\n                        <button onClick={runAddProposal}>Add proposal</button>\n                        <br/>\n                        <br/>\n                        <p>List of proposals</p>\n                        <ul>{proposals.map((proposal) => (\n                                <li>{proposal.description}</li>\n                            ))}\n                        </ul>\n                    </div>\n                );\n            }\n            else{\n                return (   \n                    <div className=\"content\">\n                        <h1>Proposals session</h1>\n                    </div>\n                );\n            }\n        }\n\n        //2 - End of proposal session\n        else if (workflowStatus===\"2\"){\n            if (isOwner){\n                return (   \n                    <div>\n                        <h1>End of proposals session</h1>\n                        <br />\n                        <button onClick={runNextStatus}>{textChangeStatus[workflowStatus]}</button>\n                    </div>\n                )\n            }\n            else if (isVoter){\n                return (   \n                    <div>\n                        <h1>End of proposals session</h1>\n                        <p>Wait for the next session to vote for your favorite proposal</p>\n                    </div>\n                )\n            }\n            else{\n                return (   \n                    <div className=\"content\">\n                        <h1>End of proposals session</h1>\n                    </div>\n                );\n            }\n        }\n\n        //3 - voting session\n        else if (workflowStatus===\"3\"){\n            if (isOwner){\n                return (   \n                    <div className=\"content\">\n                        <h1>Voting session</h1>\n                        <br />\n                        <p>Voters are voting for their favorite proposal...</p>\n                        <br/>\n                        <button onClick={runNextStatus}>{textChangeStatus[workflowStatus]}</button>\n                    </div>\n                )\n            }\n            else if (isVoter){\n                return (   \n                    <div className=\"content\">\n                        <h1>Voting session</h1>\n                        <p>List of proposals</p>\n                        <table>\n                            <thead>\n                            <tr>\n                                <th>ID</th>\n                                <th>Desciption</th>\n                                <th>Votes count</th>\n                            </tr>\n                            </thead>\n\n                            <tbody>\n                            {proposals.map((proposal, index) => (\n                                <tr>\n                                    <td>{index}</td>\n                                    <td>{proposal.description}</td>\n                                    <td>{proposal.voteCount}</td>\n                                </tr>\n                            ))}\n                            </tbody>\n                        </table>\n                        <h3>Your choice:</h3>\n                        <input type=\"text\" id=\"proposal-id\" placeholder=\"Enter ID\"/>\n                        <button id=\"vote-button\" onClick={runSetVote}>Vote</button>\n                        <p id=\"vote-text\"></p>\n\n                    </div>\n                )\n            }\n            else{\n                return (   \n                    <div className=\"content\">\n                        <h1>Voting session</h1>\n                    </div>\n                );\n            }\n        }\n\n        // 4 - end of voting session\n        else if (workflowStatus===\"4\"){\n            if (isOwner){\n                return (   \n                    <div>\n                        <h1>End of voting session</h1>\n                        <br />\n                        <button onClick={runNextStatus}>{textChangeStatus[workflowStatus]}</button>\n                    </div>\n                )\n            }\n            else if (isVoter){\n                return (   \n                    <div>\n                        <p>End of voting session</p>\n                        <p>Wait for the results in next session</p>\n                    </div>\n                )\n            }\n            else{\n                return (   \n                    <div className=\"content\">\n                        <h1>End of voting session</h1>\n                    </div>\n                );\n            }\n        }\n\n        // 5 - tally votes\n        else if (workflowStatus===\"5\"){\n            return (   \n                <div>\n                    <h1>The winner is:</h1>\n                    <h2> Proposal {winningProposalID} </h2>\n                </div>\n            )\n        }\n\n        else {\n            return (   \n                <div>Workflow status ERROR</div>\n            )\n        }\n\n    }\n}","import React from 'react';\n\nexport default class LeftColumn extends React.Component {\n\n    render(){\n        const workflowStatus = this.props.workflowStatus;\n        //const workflowStatus = this.props.workflowStatus;\n        const statusList = [\"RegisteringVoters\", \"ProposalsRegistrationStarted\", \"ProposalsRegistrationEnded\", \"VotingSessionStarted\", \"VotingSessionEnded\", \"VotesTallied\"];\n        \n        return(\n            <div className=\"left-column\">\n                <h3>Workflow status</h3>\n\n                <ul>\n                    {statusList.map((status) => (\n                        <li className={status===statusList[workflowStatus] ? \"active\" : \"\"}>{status}</li>\n                    ))}\n                </ul>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Header from \"./Header.js\";\nimport Footer from \"./Footer.js\";\nimport Content from \"./Content.js\";\nimport LeftColumn from \"./LeftColumn\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { workflowStatus: 0, web3: null, accounts: null, contract: null, voters: null, owner: null, isOwner: false, isVoter:false, proposals: [], winningProposalID: 0};\n\n  componentDidMount = async () => {\n    try {\n      window.ethereum.on('accountsChanged',function(){\n        window.location.reload();\n      });\n      window.ethereum.on('chainChanged',function(){ \n        window.location.reload();\n      });\n\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      let options = {\n        fromBlock: 0,\n        toBlock: 'latest'\n      };\n\n      let voters = (await instance.getPastEvents('VoterRegistered', options)).map(\n        (addr) => (addr.returnValues.voterAddress));\n\n      const workflowStatus = await instance.methods.workflowStatus().call();\n      const owner = await instance.methods.owner().call();\n      const isOwner =  accounts[0]===owner;\n      const isVoter = voters.includes(accounts[0]);\n\n      // Get the proposals \n      let proposals = [];\n      if (isVoter){\n        const idProposalList = (await instance.getPastEvents('ProposalRegistered', options))\n        .map((proposal) => (proposal.returnValues.proposalId));\n\n        for (let id of idProposalList){\n          proposals.push(await instance.methods.getOneProposal(id).call({ from: accounts[0] }));\n        }\n      }\n\n      //Winning proposal id\n      let winningProposalID = 0;\n      if (workflowStatus === 5){\n        winningProposalID = await instance.methods.winningProposalID().call();\n      }\n\n      // Set state \n      this.setState({workflowStatus, web3, accounts, contract: instance, voters, owner, isOwner, isVoter, proposals, winningProposalID});\n\n\n    } catch (error) {\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runAddVoter = async () => {\n    const { accounts, contract} = this.state;\n    let voterAddr = document.getElementById(\"voter-addr\").value;\n    await contract.methods.addVoter(voterAddr).send({ from: accounts[0] });\n\n    let options = {\n      fromBlock: 0,\n      toBlock: 'latest'\n    };\n\n    const addrList = (await contract.getPastEvents('VoterRegistered', options))\n                      .map((addr) => (addr.returnValues.voterAddress));\n    this.setState({voters: addrList });\n    document.getElementById(\"voter-addr\").value = \"\";\n  };\n\n  runAddProposal = async () => {\n    const { accounts, contract} = this.state;\n    let proposal = document.getElementById(\"proposal\").value;\n\n    await contract.methods.addProposal(proposal).send({ from: accounts[0] });\n\n    this.getProposals();\n    document.getElementById(\"proposal\").value = \"\";\n  };\n\n  runSetVote = async () => {\n    const { accounts, contract} = this.state;\n    let proposalId = document.getElementById(\"proposal-id\");\n    let voteButton = document.getElementById(\"vote-button\");\n    let voteText = document.getElementById(\"vote-text\");\n\n    await contract.methods.setVote(parseInt(proposalId.value)).send({ from: accounts[0] });\n \n    proposalId.remove();\n    voteButton.remove();\n    voteText.innerHTML = \"You voted for proposal \" + proposalId.value;\n    this.getProposals();\n  };\n\n  runNextStatus = async () => {\n    const { workflowStatus, accounts, contract} = this.state;\n    switch(workflowStatus){\n      case \"0\":\n        await contract.methods.startProposalsRegistering().send({ from: accounts[0] }); \n        break;\n      case \"1\":\n        await contract.methods.endProposalsRegistering().send({ from: accounts[0] });\n        break;\n      case \"2\":\n        await contract.methods.startVotingSession().send({ from: accounts[0] }); \n        break;\n      case \"3\":\n        await contract.methods.endVotingSession().send({ from: accounts[0] }); \n        break;\n      case \"4\":\n        await contract.methods.tallyVotes().send({ from: accounts[0] });\n        const winningProposalID = await contract.methods.winningProposalID().call();\n        this.setState({winningProposalID});\n        break;\n      default: \n        console.log(\"Error runNextStatus: invalid workflow status\");\n        break;\n    }\n    const newStatus = await contract.methods.workflowStatus().call();\n    this.setState({workflowStatus: newStatus});\n\n\n  };\n\n  getProposals = async () => {\n    const { accounts, contract} = this.state;\n    let options = {\n      fromBlock: 0,\n      toBlock: 'latest'\n    };\n\n    let proposals = [];\n\n    const idProposalList = (await contract.getPastEvents('ProposalRegistered', options))\n    .map((proposal) => (proposal.returnValues.proposalId));\n\n    for (let id of idProposalList){\n      proposals.push(await contract.methods.getOneProposal(id).call({ from: accounts[0] }));\n    }\n\n    // Set state \n    this.setState({proposals});\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <Header addr={this.state.accounts[0]} isOwner={this.state.isOwner} isVoter={this.state.isVoter}/>\n        <hr/>\n        <LeftColumn workflowStatus={this.state.workflowStatus}/>\n        \n        <Content\n          workflowStatus={this.state.workflowStatus}\n          voters={this.state.voters}\n          proposals={this.state.proposals}\n          owner={this.state.owner}\n          isOwner={this.state.isOwner}\n          isVoter={this.state.isVoter}\n          winningProposalID={this.state.winningProposalID}\n          runAddVoter={this.runAddVoter}\n          runAddProposal={this.runAddProposal}\n          runNextStatus={this.runNextStatus}\n          runSetVote={this.runSetVote}\n        />\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}